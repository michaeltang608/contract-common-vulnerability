// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

contract ReentrantBank {
    uint256 public constant withdrawLimit = 2 ether;
    mapping(address => uint256) public balances;

    function deposit() external payable {
        // function deposit() external pure {
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint256 _weiToWithdraw) external {
        require(
            balances[msg.sender] >= _weiToWithdraw,
            "withdraw amount exceed balance"
        );
        require(_weiToWithdraw <= withdrawLimit, "withdraw exceed max limit");
        (bool sent, ) = msg.sender.call{value: _weiToWithdraw}("");
        require(sent, "fail reentrant anyway");

        require(sent, "sent fail");
        balances[msg.sender] -= _weiToWithdraw;
    }

    function checkBalance(address _addr) external view returns (uint256) {
        return balances[_addr];
    }
}
