const {
    time,
    loadFixture,
} = require("@nomicfoundation/hardhat-network-helpers");
const { anyValue } = require("@nomicfoundation/hardhat-chai-matchers/withArgs");
const { expect } = require("chai");
const { ethers } = require("hardhat");
const { Contract } = require("hardhat/internal/hardhat-network/stack-traces/model");

describe("外部合约引用", function () {

    async function balance(addr) {
        return ethers.utils.formatEther(await ethers.provider.getBalance(addr));
    }

    async function deploy(contractLogName) {
        const Log = await ethers.getContractFactory(contractLogName);
        const ContractRefBank = await ethers.getContractFactory("ContractRefBank");
        const ReentrantAttack = await ethers.getContractFactory("ContractRefAttack");

        const log = await Log.deploy();
        const contractRefBank = await ContractRefBank.deploy(log.address, { value: ethers.utils.parseEther("10") });
        const reentrantAttack = await ReentrantAttack.deploy(contractRefBank.address);
        console.log(`初始化后的银行账户余额是: ${await balance(contractRefBank.address)}`)
        return { reentrantAttack, contractRefBank }
    }

    async function deploy_normal() {
        return await deploy("ContractRefLog")
    }

    async function deploy_malicious() {
        return await deploy("ContractRefLogFake")
    }

    async function test(_attackerAccountIdx, funcName) {
        const attackerAccountIdx = _attackerAccountIdx;
        const { reentrantAttack, contractRefBank } = await loadFixture(funcName);
        const signers = await ethers.getSigners();
        const balanceOfAttackerBefore = await balance(signers[attackerAccountIdx].address);
        const balanceOfBankBefore = await balance(contractRefBank.address);
        await reentrantAttack.connect(signers[attackerAccountIdx])
            .deposit({ value: ethers.utils.parseEther("1") });

        await reentrantAttack.connect(signers[attackerAccountIdx])
            .withdraw(ethers.utils.parseEther("1"))
            .catch(err => {
                console.log(`取款异常: ${err}`)
            });

        const balanceOfAttackerAfter = await balance(signers[attackerAccountIdx].address);
        const balanceOfBankAfter = await balance(contractRefBank.address);
        console.log(`攻击前后银行账户合约余额分别是 ${balanceOfBankBefore}, ${balanceOfBankAfter}`)
        console.log(`攻击前后攻击者的余额分别是: ${balanceOfAttackerBefore}, ${balanceOfAttackerAfter}`)
    }

    describe('testAll', function () {
        it('重入攻击成功', async () => {
            await test(2, deploy_normal)
        }
        );
        it('重入攻击圈套', async () => {
            await test(3, deploy_malicious)
        }
        );
    })
});

