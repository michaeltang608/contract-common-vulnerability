const {
  time,
  loadFixture,
} = require("@nomicfoundation/hardhat-network-helpers");
const { anyValue } = require("@nomicfoundation/hardhat-chai-matchers/withArgs");
const { expect } = require("chai");
const { ethers } = require("hardhat");
const addrutil = require("../utils/addrutil");


describe("未知ether", function () {
  async function deploy() {
    const [firstSigner, secondSigner] = await ethers.getSigners();
    //合约部署前就预测地址并提前发送以太币 
    let nonce = await ethers.provider.getTransactionCount(firstSigner.address);
    const predictedAddr = addrutil.predictAddr(firstSigner.address, nonce)
    const tx = await secondSigner.sendTransaction({
      value: ethers.utils.parseEther("10"),
      to: predictedAddr
    })
    await tx.wait()
    //actual deployed addr
    const Contract = await ethers.getContractFactory("GrameOnEther");
    const contract = await Contract.deploy();
    console.log(`刚部署后合约余额: ${ethers.utils.formatEther(await ethers.provider.getBalance(contract.address))}`)
    return { contract }
  }
  describe('testAll', function () {
    it('非正常情况下测试', async () => {
      const { contract } = await loadFixture(deploy)
      const [firstSigner, secondSigner] = await ethers.getSigners();
      await contract.play({ value: ethers.utils.parseEther("0.5") })
      await contract.connect(secondSigner).play({ value: ethers.utils.parseEther("0.5") })
      //获胜者是第二个玩家
      console.log(`获胜者是第二个玩家吗？: ${await contract.winner() === secondSigner.address}`)
      console.log(`获胜者是: ${await contract.winner()}`)
    }
    );
  })
});

