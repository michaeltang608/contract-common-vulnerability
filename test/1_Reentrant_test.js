const {
  time,
  loadFixture,
} = require("@nomicfoundation/hardhat-network-helpers");
const { anyValue } = require("@nomicfoundation/hardhat-chai-matchers/withArgs");
const { expect } = require("chai");
const { ethers } = require("hardhat");
const { addrAry } = require("../config");

describe("Faucet", function () {
  async function deploy() {
    const [owner, otherAccount] = await ethers.getSigners();
    const Bank = await ethers.getContractFactory("ReentrantBank");
    const bank = await Bank.deploy();

    const Attack = await ethers.getContractFactory("ReentrantAttack");
    const attack = await Attack.deploy(bank.address);

    return { bank, attack, owner, otherAccount }
  }

  describe('testAll', function () {
    it('normal deposit and withdraw', async () => {

      const { bank, attack, owner, otherAccount } = await loadFixture(deploy)

      console.log(`owner bal before deposit is ${ethers.utils.formatEther(await ethers.provider.getBalance(owner.address))}`);

      await bank.deposit({ value: ethers.utils.parseEther("10") })
      console.log(`owner bal after deposit is ${ethers.utils.formatEther(await ethers.provider.getBalance(owner.address))}`);

      await bank.withdraw(ethers.utils.parseEther("1"))
      console.log(`owner bal after deposit is ${ethers.utils.formatEther(await ethers.provider.getBalance(owner.address))}`);

      let bankBal = ethers.utils.formatEther(await ethers.provider.getBalance(bank.address));
      console.log(`bank total balance is ${ethers.utils.formatEther(await ethers.provider.getBalance(bank.address))}`);
      console.log(`owner balance in bank is ${ethers.utils.formatEther(await bank.checkBalance(owner.address))}`);

      // now the bank contract should holds 9 eth
      // and the bad guy will deposit and withdral through the attacker contract
      console.log(`other account balance before attack is ${ethers.utils.formatEther(await ethers.provider.getBalance(otherAccount.address))}`);
      await attack.connect(otherAccount).attackDepositWithdraw({ value: ethers.utils.parseEther("1") })
      console.log(`other account balance after attack is ${ethers.utils.formatEther(await ethers.provider.getBalance(otherAccount.address))}`);

    }
    );
  })

});

