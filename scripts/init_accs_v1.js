const { addrAry } = require('../config')
const { ethers } = require('ethers')


const provider = new ethers.providers.JsonRpcProvider('http://localhost:9545')
// ganache account with 100 ETH
const faucetAddr = '0x0B023FB09cEb8531997f35DE05685fA535F98220'
const faucetPrvKey = '0xbcdb72bdbcde5673596beff608c3354126d4e8ca42711478b591272448dc7f3b'
const faucetWalet = new ethers.Wallet(faucetPrvKey, provider)

/**
 * 普通账户转账，采用递归方式
 */
const demo = async () => {
    let a = 1
    let ary = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
    ary.forEach(async x => {
        console.log(`cur value of a is ${a++}`)
    })

}
const batchCheckBalance = async () => {
    addrAry.forEach(addr => checkBalance(addr))
}

const checkBalance = async (addr) => {
    let bal = await provider.getBalance(addr)
    console.log(`bal of ${addr} is ${ethers.utils.formatEther(bal)}`)
}

const transfer = async (to, nonce) => {
    const tx = await faucetWalet.sendTransaction({
        value: ethers.utils.parseEther("10"),
        to: to,
        nonce: nonce
    })
    await tx.wait()
}
const batchTransfer = async (idx) => {
    //allocate 10eth to each of the configured 5 accs
    let addr = addrAry[idx]
    checkBalance(addr)
    //transter 
    let txCount = await provider.getTransactionCount(faucetAddr)
    // addrAry.forEach(addr => {
    let nonce = txCount
    transfer(addr, nonce)
        .then(async () => {
            let bal = await provider.getBalance(addr)
            console.log(`after transfer, bal of ${addr} is ${ethers.utils.formatEther(bal)}`)
        }).then(() => {
            //begin recursive to process all transaction
            if (idx < (addrAry.length - 1)) {
                batchTransfer(idx + 1)
            } else {
                console.log('all finished')
            }

        })
    txCount++

    // })
}
// batchCheckBalance()
// transfer()
batchTransfer(0)
    // checkBalance()
    .catch(err => {
        console.error(err)
        process.exitCode = 1
    })